{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Flask-India tutorial This tutorial website is behalf of Flask-India Telegram channel owned by group of people including me. This tutorial website is inspired from FastAPI. We are also using MKDocs Material Theme for this website. More About this Website","title":"Flask-India Tutorial"},{"location":"#welcome-to-flask-india-tutorial","text":"This tutorial website is behalf of Flask-India Telegram channel owned by group of people including me. This tutorial website is inspired from FastAPI. We are also using MKDocs Material Theme for this website.","title":"Welcome to Flask-India tutorial"},{"location":"#more-about-this-website","text":"","title":"More About this Website"},{"location":"chapter_1/flask_framework/","text":"Flask is Python micro web framework. Flask is developed by Armin Ronacher on April 1 , 2010. According to Ronacher, the idea was originally an April Fool's joke that was popular enough to make into a serious application. The name is a play on the earlier Bottle framework. When Ronacher and Georg Brandl created a bulletin board system written in Python in 2004, the Pocoo projects Werkzeug and Jinja were developed. In April 2016, the Pocoo team was disbanded and development of Flask and related libraries passed to the newly formed Pallets project. Flask Components Werkzeug Werkzeug (German for \"tool\") is a utility library for the Python programming language, in other words a toolkit for Web Server Gateway Interface (WSGI) applications, and is licensed under a BSD License. Werkzeug can realize software objects for request, response, and utility functions. Jinja Jinja, also by Ronacher, is a template engine for the Python programming language and is licensed under a BSD License. Similar to the Django web framework, it handles templates in a sandbox. MarkupSafe MarkupSafe is a string handling library for the Python programming language, licensed under a BSD license. The eponymous MarkupSafe type extends the Python string type and marks its contents as \"safe\"; combining MarkupSafe with regular strings automatically escapes the unmarked strings, while avoiding double escaping of already marked strings. ItsDangerous ItsDangerous is a safe data serialization library for the Python programming language, licensed under a BSD license. It is used to store the session of a Flask application in a cookie without allowing users to tamper with the session contents. Click Click is a beautiful, compasable command line interface (CLI) creation kit. Features Development server and debugger Integrated support for unit testing RESTful request dispatching Uses Jinja templating Support for secure cookies (client side sessions) 100% WSGI 1.0 compliant Unicode-based Extensive documentation Google App Engine compatibility Extensions available to enhance features desired","title":"Flask"},{"location":"chapter_1/flask_framework/#flask-components","text":"","title":"Flask Components"},{"location":"chapter_1/flask_framework/#werkzeug","text":"Werkzeug (German for \"tool\") is a utility library for the Python programming language, in other words a toolkit for Web Server Gateway Interface (WSGI) applications, and is licensed under a BSD License. Werkzeug can realize software objects for request, response, and utility functions.","title":"Werkzeug"},{"location":"chapter_1/flask_framework/#jinja","text":"Jinja, also by Ronacher, is a template engine for the Python programming language and is licensed under a BSD License. Similar to the Django web framework, it handles templates in a sandbox.","title":"Jinja"},{"location":"chapter_1/flask_framework/#markupsafe","text":"MarkupSafe is a string handling library for the Python programming language, licensed under a BSD license. The eponymous MarkupSafe type extends the Python string type and marks its contents as \"safe\"; combining MarkupSafe with regular strings automatically escapes the unmarked strings, while avoiding double escaping of already marked strings.","title":"MarkupSafe"},{"location":"chapter_1/flask_framework/#itsdangerous","text":"ItsDangerous is a safe data serialization library for the Python programming language, licensed under a BSD license. It is used to store the session of a Flask application in a cookie without allowing users to tamper with the session contents.","title":"ItsDangerous"},{"location":"chapter_1/flask_framework/#click","text":"Click is a beautiful, compasable command line interface (CLI) creation kit.","title":"Click"},{"location":"chapter_1/flask_framework/#features","text":"Development server and debugger Integrated support for unit testing RESTful request dispatching Uses Jinja templating Support for secure cookies (client side sessions) 100% WSGI 1.0 compliant Unicode-based Extensive documentation Google App Engine compatibility Extensions available to enhance features desired","title":"Features"},{"location":"chapter_1/flask_installation/","text":"We can install Flask using any package manager like pip, pipenv, virtualenv etc. But here we are demonstrating installation with python pip package manager. Installation on Windows 1. Navigate to project folder using cd command. cd path\\to\\project_dir\\ 2. Create virtual environment python -m venv venv here last venv is the name of virtual environment. You can change the name of virtual environment if you wish. However it will create a venv folder inside your project folder. Warning If you running your project on Windows or Linux, ensure the virtual environment is enabled. Unless you will end up with ImportError no module named Flask. 3. Activate virtual environment .\\venv\\Scripts\\activate 4. Install Flask (venv) path\\to\\project_dir> pip install flask ---> 100% Installation on Linux 1. Navigate to project folder using cd command. $ cd path/to/project_dir 2. Create virtual environment $ python3 -m venv venv here last venv is the name of virtual environment as mentioned earler. 3. Activate virtual environment source venv/bin/activate 4. Install Flask (venv) path/to/project_dir> pip3 install flask ---> 100%","title":"Flask installation"},{"location":"chapter_1/flask_installation/#installation-on-windows","text":"1. Navigate to project folder using cd command. cd path\\to\\project_dir\\ 2. Create virtual environment python -m venv venv here last venv is the name of virtual environment. You can change the name of virtual environment if you wish. However it will create a venv folder inside your project folder. Warning If you running your project on Windows or Linux, ensure the virtual environment is enabled. Unless you will end up with ImportError no module named Flask. 3. Activate virtual environment .\\venv\\Scripts\\activate 4. Install Flask (venv) path\\to\\project_dir> pip install flask ---> 100%","title":"Installation on Windows"},{"location":"chapter_1/flask_installation/#installation-on-linux","text":"1. Navigate to project folder using cd command. $ cd path/to/project_dir 2. Create virtual environment $ python3 -m venv venv here last venv is the name of virtual environment as mentioned earler. 3. Activate virtual environment source venv/bin/activate 4. Install Flask (venv) path/to/project_dir> pip3 install flask ---> 100%","title":"Installation on Linux"},{"location":"chapter_1/getting_started_with_flask/","text":"Here we are introducing first flask application. Unlike django you can run flask application from a single file called app.py . You can give any name for this file. But flask internally recognizes app.py as a main flask application. so just go for that. 1 2 3 4 5 6 7 8 9 10 11 12 from flask import Flask app = Flask ( __name__ ) @app . route ( '/' ) def index (): return \"Hello World\" if __name__ == '__main__' : app . run () The app.py is given above. In line number 1 we import Flask from flask package. In line number 3 we given app = Flask(__name__) . The __name__ special python variable is given to Flask in order to get import name . This import name is essential because Flask finds out paths to static directory, templetes diretory and blueprints relative to this import name. You can see highlighted function which is decorated with app.route method. The function decorated with app.route is called the View function . In the app.route() method we are defining url pattern for our view . Whatever the view function returns will become response of the route. Here view function returns a string which is Hello World . Hence hello world will be shown on browser. Run Flask Development Server You can run flask development server using two methods. Method 1: Using Python Command Navigate to your project directory using command prompt/ terminal. Activate virtual environment if you have virtual environnment. Then run flask application using following command: For Windows: python app.py For Linux: python3 app.py Using Flask Command Line Interface (CLI) Flask comes with a nice command line interface using Pallet's Click Project. We can use command line interface in order to run our Flask Application. Setting Environment Variables If you are not using name of the flask application as app.py , then Flask need to set atleast one environment variable. That environment variable FLASK_APP . If you are using name of application as app.py you can skip this step. 1. Setting FLASK_APP environment variable For Windows command prompt: set FLASK_APP=python_file_name_without_extension Note For example, if our Flask application is saved in file test.py , then python_file_name_without_extension will becomes test . For Windows Powershell: $ env:FLASK_APP = \"python_file_name_without_extension\" Warning Remember there is a double quoutes surrounding python_file_name_without_extension like \"python_file_name_without_extension\" . For Linux: export FLASK_APP=python_file_name_without_extension 2. Run Flask Application You can run Flask application using following command. flask run Success You can use any method for run Flask application. Since we didn't defined port the web server will run on default port (which is port 5000) of loop back address http://127.0.0.1:5000. Example 1.1: Output","title":"Getting Started With Flask"},{"location":"chapter_1/getting_started_with_flask/#run-flask-development-server","text":"You can run flask development server using two methods.","title":"Run Flask Development Server"},{"location":"chapter_1/getting_started_with_flask/#method-1-using-python-command","text":"Navigate to your project directory using command prompt/ terminal. Activate virtual environment if you have virtual environnment. Then run flask application using following command: For Windows: python app.py For Linux: python3 app.py","title":"Method 1: Using Python Command"},{"location":"chapter_1/getting_started_with_flask/#using-flask-command-line-interface-cli","text":"Flask comes with a nice command line interface using Pallet's Click Project. We can use command line interface in order to run our Flask Application. Setting Environment Variables If you are not using name of the flask application as app.py , then Flask need to set atleast one environment variable. That environment variable FLASK_APP . If you are using name of application as app.py you can skip this step. 1. Setting FLASK_APP environment variable For Windows command prompt: set FLASK_APP=python_file_name_without_extension Note For example, if our Flask application is saved in file test.py , then python_file_name_without_extension will becomes test . For Windows Powershell: $ env:FLASK_APP = \"python_file_name_without_extension\" Warning Remember there is a double quoutes surrounding python_file_name_without_extension like \"python_file_name_without_extension\" . For Linux: export FLASK_APP=python_file_name_without_extension 2. Run Flask Application You can run Flask application using following command. flask run Success You can use any method for run Flask application. Since we didn't defined port the web server will run on default port (which is port 5000) of loop back address http://127.0.0.1:5000. Example 1.1: Output","title":"Using Flask Command Line Interface (CLI)"},{"location":"chapter_2/creating_package/","text":"","title":"Creating Package"},{"location":"chapter_2/introduction/","text":"From a basic CRUD application you can laern a lot. Here CRUD means database operations CR eate, U pdate, D elete. As a developer its necessary to know these operations. We are using: Flask-SQLAlchemy for database operations Flask-Migrate for alembic migrations Flask-WTF for creating forms Hopes readers will enjoy this chapter and learn a lot ahead database operations using this hands-on experiment. Project Setup Here we will create an Admin blueprint. We are not using any HTML templates for the explanation purpose. We will discuss about authentication, role-based login etc. in upcoming chapters. flask_crud_app \u251c\u2500\u2500 app.py \u2514\u2500\u2500 flask_lib \u251c\u2500\u2500 admin \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 admin_static \u2502 \u2502 \u2514\u2500\u2500 style.css \u2502 \u251c\u2500\u2500 admin_template \u2502 \u2502 \u251c\u2500\u2500 admin_base.html \u2502 \u2502 \u2514\u2500\u2500 category_list.html \u2502 \u251c\u2500\u2500 category.py \u2502 \u251c\u2500\u2500 form \u2502 \u2502 \u2514\u2500\u2500 category_form.py \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 __init__.py Installing Necessary Packages As we mentioned earlier we need Flask-SQLAlchemy, Flask-Migrate and Flask-WTF $ ( venv ) pip install Flask-SQLAlchemy Flask-Migrate Flask-WTF ---> 100%","title":"Introduction"},{"location":"chapter_2/introduction/#project-setup","text":"Here we will create an Admin blueprint. We are not using any HTML templates for the explanation purpose. We will discuss about authentication, role-based login etc. in upcoming chapters. flask_crud_app \u251c\u2500\u2500 app.py \u2514\u2500\u2500 flask_lib \u251c\u2500\u2500 admin \u2502 \u251c\u2500\u2500 admin.py \u2502 \u251c\u2500\u2500 admin_static \u2502 \u2502 \u2514\u2500\u2500 style.css \u2502 \u251c\u2500\u2500 admin_template \u2502 \u2502 \u251c\u2500\u2500 admin_base.html \u2502 \u2502 \u2514\u2500\u2500 category_list.html \u2502 \u251c\u2500\u2500 category.py \u2502 \u251c\u2500\u2500 form \u2502 \u2502 \u2514\u2500\u2500 category_form.py \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 __init__.py","title":"Project Setup"},{"location":"chapter_2/introduction/#installing-necessary-packages","text":"As we mentioned earlier we need Flask-SQLAlchemy, Flask-Migrate and Flask-WTF $ ( venv ) pip install Flask-SQLAlchemy Flask-Migrate Flask-WTF ---> 100%","title":"Installing Necessary Packages"}]}